# Máquina de Turing para reconocer cadenas espejo abbbba pares
q_states:
  q_list:
    - q_start    # Estado inicial donde comienza el procesamiento
    - q_check    # Estado para mover a la izquierda y buscar el siguiente símbolo sin marcar
    - q_right    # Estado para mover a la derecha hasta el final de la cadena
    - q_left     # Estado para comparar símbolos y moverse hacia la izquierda
    - q_accept   # Estado de aceptación
    - q_reject   # Estado de rechazo
  initial: q_start
  final: [q_accept]

alphabet:
  - a            # Símbolo 'a' del alfabeto de entrada
  - b            # Símbolo 'b' del alfabeto de entrada

tape_alphabet:
  - a            # Símbolo 'a' del alfabeto de la cinta
  - b            # Símbolo 'b' del alfabeto de la cinta
  - X            # Marca utilizada para indicar símbolos procesados
  -              # Símbolo en blanco (espacio vacío)

delta:
  # Desde q_start, leer el primer símbolo y almacenarlo en mem_cache, marcarlo como 'X', mover a la derecha
  - params:
      initial_state: q_start
      mem_cache_value:
      tape_input: a
    output:
      final_state: q_right
      mem_cache_value: a          # Almacena 'a' en mem_cache
      tape_output: X              # Marca el símbolo como procesado
      tape_displacement: R        # Mueve el cabezal a la derecha

  - params:
      initial_state: q_start
      mem_cache_value:
      tape_input: b
    output:
      final_state: q_right
      mem_cache_value: b          # Almacena 'b' en mem_cache
      tape_output: X              # Marca el símbolo como procesado
      tape_displacement: R        # Mueve el cabezal a la derecha

  # Si en q_start encuentra un 'X' o un espacio en blanco, acepta (todos los símbolos han sido procesados)
  - params:
      initial_state: q_start
      mem_cache_value:
      tape_input: X
    output:
      final_state: q_accept
      mem_cache_value:
      tape_output: X
      tape_displacement: S        # Mantiene el cabezal en su lugar

  - params:
      initial_state: q_start
      mem_cache_value:
      tape_input:
    output:
      final_state: q_accept
      mem_cache_value:
      tape_output:
      tape_displacement: S        # Mantiene el cabezal en su lugar

  # En q_right, mover a la derecha hasta el final de la cadena (espacio en blanco o 'X')
  - params:
      initial_state: q_right
      mem_cache_value: a
      tape_input: a
    output:
      final_state: q_right
      mem_cache_value: a
      tape_output: a
      tape_displacement: R        # Continúa moviéndose a la derecha

  - params:
      initial_state: q_right
      mem_cache_value: a
      tape_input: b
    output:
      final_state: q_right
      mem_cache_value: a
      tape_output: b
      tape_displacement: R        # Continúa moviéndose a la derecha

  # Al encontrar un 'X' o espacio en blanco en q_right, cambiar a q_left para comparar
  - params:
      initial_state: q_right
      mem_cache_value: a
      tape_input: X
    output:
      final_state: q_left
      mem_cache_value: a
      tape_output: X
      tape_displacement: L        # Mueve el cabezal a la izquierda

  - params:
      initial_state: q_right
      mem_cache_value: a
      tape_input:
    output:
      final_state: q_left
      mem_cache_value: a
      tape_output:
      tape_displacement: L        # Mueve el cabezal a la izquierda

  # Transiciones similares para mem_cache_value 'b'
  - params:
      initial_state: q_right
      mem_cache_value: b
      tape_input: a
    output:
      final_state: q_right
      mem_cache_value: b
      tape_output: a
      tape_displacement: R

  - params:
      initial_state: q_right
      mem_cache_value: b
      tape_input: b
    output:
      final_state: q_right
      mem_cache_value: b
      tape_output: b
      tape_displacement: R

  - params:
      initial_state: q_right
      mem_cache_value: b
      tape_input: X
    output:
      final_state: q_left
      mem_cache_value: b
      tape_output: X
      tape_displacement: L

  - params:
      initial_state: q_right
      mem_cache_value: b
      tape_input:
    output:
      final_state: q_left
      mem_cache_value: b
      tape_output:
      tape_displacement: L

  # En q_left, comparar el símbolo actual con mem_cache_value
  - params:
      initial_state: q_left
      mem_cache_value: a
      tape_input: a
    output:
      final_state: q_check
      mem_cache_value:
      tape_output: X              # Marca el símbolo como procesado
      tape_displacement: L        # Mueve el cabezal a la izquierda

  # Si los símbolos no coinciden, rechaza la cadena
  - params:
      initial_state: q_left
      mem_cache_value: a
      tape_input: b
    output:
      final_state: q_reject
      mem_cache_value:
      tape_output: b
      tape_displacement: S        # Mantiene el cabezal en su lugar

  # Transiciones similares para mem_cache_value 'b'
  - params:
      initial_state: q_left
      mem_cache_value: b
      tape_input: b
    output:
      final_state: q_check
      mem_cache_value:
      tape_output: X
      tape_displacement: L

  - params:
      initial_state: q_left
      mem_cache_value: b
      tape_input: a
    output:
      final_state: q_reject
      mem_cache_value:
      tape_output: a
      tape_displacement: S

  # En q_check, mover a la izquierda hasta el siguiente símbolo sin marcar o el inicio
  - params:
      initial_state: q_check
      mem_cache_value:
      tape_input: a
    output:
      final_state: q_check
      mem_cache_value:
      tape_output: a
      tape_displacement: L        # Continúa moviéndose a la izquierda

  - params:
      initial_state: q_check
      mem_cache_value:
      tape_input: b
    output:
      final_state: q_check
      mem_cache_value:
      tape_output: b
      tape_displacement: L        # Continúa moviéndose a la izquierda

  # Al encontrar un 'X' o espacio en blanco en q_check, regresar a q_start
  - params:
      initial_state: q_check
      mem_cache_value:
      tape_input: X
    output:
      final_state: q_start
      mem_cache_value:
      tape_output: X
      tape_displacement: R        # Mueve el cabezal a la derecha

  - params:
      initial_state: q_check
      mem_cache_value:
      tape_input:
    output:
      final_state: q_start
      mem_cache_value:
      tape_output:
      tape_displacement: R        # Mueve el cabezal a la derecha

  # Si en q_start encuentra espacio en blanco, acepta la cadena
  - params:
      initial_state: q_start
      mem_cache_value:
      tape_input:
    output:
      final_state: q_accept
      mem_cache_value:
      tape_output:
      tape_displacement: S

  # En q_reject, permanece en el estado de rechazo
  - params:
      initial_state: q_reject
      mem_cache_value:
      tape_input:
    output:
      final_state: q_reject
      mem_cache_value:
      tape_output:
      tape_displacement: S

simulation_strings:
  - abaaba
  - bababbabab
  - abaabaaba
  - bababababa 
